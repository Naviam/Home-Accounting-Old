@using Naviam.WebUI.Resources
@using Naviam.Entities.User;
@using Naviam.Data;
@{
    ViewBag.Title = SharedStrings.TransactionsTitle;
    Layout = "~/Views/Shared/_LayoutWithSidebars.cshtml";
    ViewBag.CombresScripts = "transactions";
}
@*intellisense support*@
@if (false)
{ 
    <script type="text/javascript" src="~/Scripts/jquery-1.6.2.js"></script> 
    <script type="text/javascript" src="~/Scripts/knockout-1.2.1.js"></script> 
    <script type="text/javascript" src="~/Scripts/knockout.mapping.js"></script> 
    <script type="text/javascript" src="~/Scripts/common.js"></script> 
}

<script type='text/javascript'>
    var getTransUrl = '@Url.Action("GetTransactions", "Transactions")';
    var delTransUrl = '@Url.Action("DeleteTransaction", "Transactions")';
    var updateTransUrl = '@Url.Action("UpdateTransaction", "Transactions")';
    var getCatUrl = '@Url.Action("GetCategories", "Transactions")';
    var getAccountsUrl = '@Url.Action("GetAccounts", "Accounts")';
    var updateAccountUrl = '@Url.Action("UpdateAccount", "Accounts")';
    var deleteAccountUrl = '@Url.Action("DeleteAccount", "Accounts")';
    //var imageFilesPath = '@Url.Content("~/Content/images/dpicker/")';
    $(document).ready(function () {
        var url = $('#upload_statement').parents('form').attr('action');
        $('#upload_statement').html5_upload({ autostart: false, url: url, onFinish: function (event, total) {
            transModel.ReloadPage();
        }
        });

        $.postErr(getAccountsUrl, transModel.paging, function (res) {
//            var childItem = function (data) {
//                ko.mapping.fromJS(data, {}, this);
//            }
            var mapping = {
                'items': {
                    key: function (data) {
                        return ko.utils.unwrapObservable(data.Id);
                    }
//                    , create: function (options) {
//                        return new childItem(options.data, {}, this);
//                    }
                }
            }

            accountsModel = ko.mapping.fromJS(res, mapping);
            accountsModel.selectedItem = ko.observable(null);
            accountsModel.selectedItem(accountsModel.items()[0]);
            accountsModel.selectedItem.subscribe(function (newValue) {
                pageContext.accountId = newValue.Id();
                transModel.ReloadPage();
            });
            accountsModel.hideEdit = function (show) {
                var elem = $("#account_edit")[0];
                var trans_elem = $("#transGrid");
                $(elem).find('form').validator({ lang: lang.culture }).data("validator").reset();
                if (!show) {
                    $(elem).hide();
                    trans_elem.show();
                }
                else {
                    $(elem).show();
                    trans_elem.hide();
                }
            }
            accountsModel.passToEdit = function (item, editItem) {
                var elem = $("#account_edit")[0];
                var trans_elem = $("#transGrid");
                item.Save = function () {
                    if (item === this) {
                        if ($(elem).find('form').data("validator").checkValidity()) {
                            $.postErr(updateAccountUrl, this, function (res) {
                                if (editItem != null)
                                    ko.mapping.fromJS(item, {}, editItem);
                                else {
                                    koNew = ko.mapping.fromJS(res)
                                    accountsModel.items.splice(1, 0, koNew);
                                }
                                accountsModel.hideEdit(false);
                            });
                        }
                    }
                }
                ko.cleanNode(elem);
                ko.applyBindings(item, elem);
                accountsModel.hideEdit(true);
            }
            accountsModel.addItem = function () {
                var newItem = { Id: null, Number: null, Balance: null, Description: null, CurrencyId: null };
                this.passToEdit(newItem, null);
            }
            accountsModel.editItem = function (item) {
                accountsModel.passToEdit(ko.mapping.toJS(item), item);
            }
            accountsModel.deleteItem = function (item) {
                $.postErr(deleteAccountUrl, { id: item.Id() }, function (res) {
                    ko.utils.arrayRemoveItem(accountsModel.items, item);
                });
            }
            ko.applyBindings(accountsModel, $("#accounts")[0]);
            
            loadTransactions();
        });

    });
    function beg_upload_statement() {
        $('#upload_statement').trigger('html5_upload.start');
        return false;
    }
</script>

@section LeftColumn {
<script type="text/html" id="accountsTemplate">
    <li>
        <a href="#" data-bind="click: function(event) { $item.current($data); }, text: Number, css: {selected: $item.current() == $data}"></a>
        <a href="#" data-bind="click: function(event) { $item.edit($data); }, visible: $data.Id() != null">Edit</a>
        <a href="#" data-bind="click: function(event) { $item.delete($data); }, visible: $data.Id() != null">Delete</a>
    </li>
</script>
<div id="accounts">
    <a href="#" data-bind="click: function(event) { addItem(); }">Add</a>
    <ul data-bind="template: {name:'accountsTemplate', foreach:items, templateOptions: { current: selectedItem, edit: editItem, delete: deleteItem } }" class='company_menu'>
    </ul>
</div>
}

@{UserProfile user = ViewBag.CurrentUser as UserProfile;}
@using (Html.BeginForm("UploadStatement", "Attachments", new { @cid = user.CurrentCompany }, FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    <input type="file" id='upload_statement' name='fileToUpload'/>
    <button onclick='beg_upload_statement();' type="button">@SharedStrings.Upload</button>
}
<a href="#" onclick='return transModel.ReloadPage();'>Refresh</a>
<script type="text/html" id="transRowTemplate">
    <tr data-bind="click: function(event) { transModel.GoToEdit(event, $data); }, css: {selected: transModel.selectedItem() == $data}">
        <td style="width:12%">
            <div>
            <span data-bind="msDateTime: Date, visible: transModel.selectedItem() != $data" name="Date"></span>
            <input class="width100" data-bind="visible: transModel.selectedItem() == $data, datepicker: Date, datepickerOptions: {format: dateFormat.masks['default'], lang: lang.culture, selectors: true, firstDay: lang.firstDay}" />
            @*<img data-bind="visible: transModel.selectedRow() == Id(), click: function(event) {transModel.showCalendar(event, $data);}" style="cursor:pointer;" alt="" src="@Url.Content("~/Content/images/dpicker/cal.gif")">*@
            </div>
        </td>
        <td style="width:38%">
            <span data-bind="visible: transModel.selectedItem() != $data, text: Description"></span>
            <input class="width100" data-bind="visible: transModel.selectedItem() == $data, value: Description" />
        </td>
        <td style="width:35%">
            <span data-bind="visible: transModel.selectedItem() != $data, text: Category"></span>
            <div data-bind="visible: transModel.selectedItem() == $data" style='position:relative;'><input class="width100" data-bind="category: Category" name="Category"/>
            <a href="#" onclick='return transModel.ShowCategories(this);' class='category_picker'></a></div>
        </td>
        <td style="width:10%;white-space:nowrap">
            @*<span data-bind="text: Amount, visible: transModel.selectedRow() != Id() || (transModel.currentItem != null && transModel.currentItem.Id() != null)"></span>
            <input class="width100" data-bind="visible: transModel.selectedRow() == Id() && transModel.currentItem.Id() == null, value: Amount" />*@
            <span data-bind="text: Direction() == 0 ? '-' : ''"></span>
            <span data-bind="amount: Amount, visible: transModel.selectedItem() != $data"></span>
            <input class="width100" data-bind="visible: transModel.selectedItem() == $data, amount: Amount" name="Amount"/>        
        </td>
        <td style="width:5%">
            <a href="#" data-bind="visible: transModel.selectedItem() == $data && $data.Id() != null, click: function(event) {transModel.ShowEdit(event, $data);}">Edit</a>
            <a href="#" data-bind="visible: transModel.selectedItem() == $data && $data.Id() != null, click: function(event) {transModel.DeleteItem($data);}">Delete</a>
        </td>
    </tr>
</script>

<script type="text/html" id="transPagingTemplate">
    <span>@DisplayNames.Page:</span>
    {{each(i) ko.utils.range(1, paging.PagesCount)}}
        <a href="#" data-bind="click: function() { paging.Page(i+1) }, css: { selected: i+1 == paging.Page() }">
            ${ i + 1 }
        </a>
    {{/each}}
</script>
<script type="text/html" id="transHeadTemplate">
    <tr>
    {{each(i, head) headItems()}}
        <th data-bind="attr: {colspan: Columns}, text: Text()+(paging.SortField()==head.Field() ? (paging.SortDirection() == 0 ? ' ▲' : ' ▼') : ''), click: function() { Sort(head.Field()) }"></th>
    {{/each}}
    </tr>
</script>
<div style='position:relative'>
    <div id="transGrid">
    <a href="#" onclick='return transModel.Add();' data-bind="visible: accountsModel.selectedItem() != null && accountsModel.selectedItem().Id() != null">Add</a>
    <table class='grid'>
        <thead data-bind='template: "transHeadTemplate"' >
        </thead>
        <tbody data-bind='template: { name: "transRowTemplate", foreach: items }'>
        </tbody>
    </table>
    @*    <div class='hidden' id='edit_row' style='position:fixed;border:1px solid #000;'>
        <table width="100%">
        <tr>
        <td><input name="Description" /></td>
        </tr>
        </table>
        <a href="#" onclick='return transModel.ShowEditArea(this);'>Edit</a>
        <div class='edit_area hidden'">
            tstst
        </div>
    </div>*@
    <div data-bind='template: "transPagingTemplate"' class='paging'>
    </div>
    </div>
    <div class="overlaywoshadow" id="transDlg">
        <table>
            <td></td>
            <td>
                <label><input data-bind="checked: Direction" name="Direction" type="radio" value='0'/>@DisplayNames.Expense</label>
                <label><input data-bind="checked: Direction" name="Direction" type="radio" value='1'/>@DisplayNames.Income</label>
            </td>
        <tr>
            <td>@DisplayNames.Merchant:</td>
            <td><input data-bind="value: Merchant" name="Merchant"/></td>
        </tr>
        <tr>
            <td>@DisplayNames.Notes:</td>
            <td><textarea data-bind="value: Notes" name="Notes" rows='2' cols='2'></textarea></td>
        </tr>
        </table>
        <div>
            <button class='close' id='ok'>Ok</button>
            <button class='close' id='cancel'>@SharedStrings.Cancel</button>
        </div>     
    </div>
</div>

<script type="text/html" id="catTemplate">
    <li>
    <a href="#" data-bind="click: function(event) { catModel.AssignCategory($data); }, text: Name"></a>
        <ul>
        {{each(i, item) Subitems()}}
            <li data-bind="click: function(event) { catModel.AssignCategory(item); }">
            <a href="#" data-bind="text: Name"></a>
            </li>
        {{/each}}
        </ul>
    </li>
</script>
<div id="cat_menu" style='position:absolute'>
    <ul data-bind="template: {name:'catTemplate', foreach:items}" class='dropdown'>
    </ul>
</div>


<div id='account_edit' class='hidden'>
@*TODO: move to partial view*@
@using (Html.BeginForm("UpdateAccount", "Accounts", FormMethod.Post, new {id = "editAccountFrm" }))
{
    <table>
    <tr>
    <td>Account:</td>
    <td><input data-bind="value: Number" name="Number" required="required"/></td>
    <td>Balance:</td>
    <td><input data-bind="value: Balance" name="Balance" required="required"/></td>
    </tr>
    <tr>
        <td>Destination country: <select required="required" data-bind="options: accountsModel.currItems, optionsText: 'NameShort', optionsValue: 'Id', optionsCaption: 'Select an item...', value: CurrencyId"></select></td>
    </tr>
@*    <tr>
    <td>Description:</td>
    <td><textarea data-bind="value: Description" name="Description" rows='1' cols='1'/></td>
    </tr>*@
    </table>
    <button type="button" data-bind="click: function(event) { Save(); }">Ok</button>
    <button type="button" data-bind="click: function(event) { accountsModel.hideEdit(false); }">@SharedStrings.Cancel</button>
}
</div>

