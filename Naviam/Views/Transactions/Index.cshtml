@using Naviam.Resources;
@{
    ViewBag.Title = SharedStrings.TransactionsTitle;
    Layout = "~/Views/Shared/LayoutMember.cshtml";
    ViewBag.CombresScripts = "transactions";
}
@*intellisense support*@
@if (false)
{ 
    <script type="text/javascript" src="~/Scripts/jquery-1.6.2.js"></script> 
    <script type="text/javascript" src="~/Scripts/knockout-1.2.1.js"></script> 
    <script type="text/javascript" src="~/Scripts/knockout.mapping.js"></script> 
}
<script type='text/javascript'>
    //JSON.stringify
    var transModel = {
        paging: { Page: 1, SortField: 'Date', SortDirection: 1 }
    };
    ko.numericObservable = function (initialValue) {
        var _actual = ko.observable(initialValue);
        var result = ko.dependentObservable({
            read: function () {
                return _actual();
            },
            write: function (newValue) {
                var parsed = parseFloat(newValue);
                if (isNaN(parsed))
                    _actual.valueHasMutated();
                _actual(isNaN(parsed) ? _actual() : parsed);
            }
        });
        return result;
    };
    ko.categoryObservable = function (initialValue) {
        var _actual = ko.observable(initialValue);
        var result = ko.dependentObservable({
            read: function () {
                return _actual();
            },
            write: function (newValue) {
                //find category
                var item = catModel.Search(newValue);
                if (item == null)
                    _actual.valueHasMutated();
                _actual(item == null ? _actual() : item.Name());
            }
        });
        return result;
    };
    $(document).ready(function () {
        $.postErr('@Url.Action("GetTransactions", "Transactions")', transModel.paging, function (res) {
            var childItem = function (data) {
                ko.mapping.fromJS(data, {}, this);
                this.Amount = ko.numericObservable(data.Amount);
                this.Category = ko.categoryObservable(data.Category);
            }
            var mapping = {
                'items': {
                    key: function (data) {
                        return ko.utils.unwrapObservable(data.Id);
                    }
                     , create: function (options) {
                         return new childItem(options.data, {}, this); ;
                     }
                }
            }
            transModel = ko.mapping.fromJS(res, mapping);
            transModel.paging.Page.subscribe(function (newValue) {
                transModel.ReloadPage();
            });
            transModel.selectedRow = ko.observable(-1);
            transModel.currentItem = null;
            transModel.ReloadPage = function () {
                $.postErr('@Url.Action("GetTransactions", "Transactions")', transModel.paging, function (res) {
                    ko.mapping.updateFromJS(transModel, res);
                    transModel.selectedRow(-1);
                    transModel.currentItem = null;
                    $('#edit_row').hide();
                });
            }
            transModel.DescrSub = null;
            transModel.GoToEdit = function (event, item) {
                //manual edit row
                //                    var row = $(event.currentTarget)
                //                    var rowEdit = $('#edit_row');
                //                    rowEdit.css({ top: row.offset().top, width: row.width(), height: row.height() });
                //                    rowEdit.find('.edit_area').slideUp();
                //                    rowEdit.find('[name="Description"]').val(item.Description());
                //                    rowEdit.show();
                //**********

                //console.log(event);
                //item.Amount = ko.numericObservable(item.Amount());
                item.FullRow = ko.dependentObservable(function () {
                    return this.Id() + "_" + this.Description() + "_" + this.Category() + "_" + this.Amount();
                }, item);
                this.selectedRow(item.Id());
                this.currentItem = item;
                if (this.DescrSub != null)
                    this.DescrSub.dispose();
                this.DescrSub = item.FullRow.subscribe(function (newValue) {
                    transModel.Save();
                });
            }
            //obj.date = eval(obj.date.replace(/\//g,'')) -- to convert the download datestring after json to a javascript Date
            //obj.date = "\\/Date(" + obj.date.getTime() + ")\\/" --to convert a javascript date to microsoft json:
            transModel.Save = function () {
                if (this.currentItem != null) {
                    var item = catModel.Search(this.currentItem.Category());
                    if (item != null)
                        this.currentItem.CategoryId(item.Id());
                    //transModel.currentItem.Date = transModel.currentItem.Date().replace('/Date(', '\\/Date(').replace(')/', ')\\/');
                    //                    $.postErr('@Url.Action("UpdateTransaction", "Transactions")', ko.toJSON(transModel.currentItem), function (res) {
                    //                    }, 'json');
                    $.postErr('@Url.Action("UpdateTransaction", "Transactions")', transModel.currentItem, function (res) {
                    });
                    //console.log(transModel.currentItem.Id());
                }
            }
            transModel.ShowEditArea = function (btn) {
                var editArea = $(btn).parent().find('.edit_area');
                //TODO: load data into form
                editArea.slideDown();
            }
            transModel.ShowCategories = function (btn) {
                var menu = $("#cat_menu");
                var input = $(btn).parent().find('[name="Category"]');
                menu.css({ top: input.offset().top + 20, left: input.offset().left });
                menu.width(input.width());
                $("#cat_menu ul").width(input.width());
                menu.slideDown();
            }
            transModel.Sort = function (val) {
                var currSort = this.paging.SortField();
                if (currSort != null)
                    if (val == currSort) {
                        if (this.paging.SortDirection() == 0)
                            this.paging.SortDirection(1);
                        else
                            this.paging.SortDirection(0);
                    }
                    else
                        this.paging.SortDirection(0);
                this.paging.SortField(val)
                this.ReloadPage();
            }
            ko.applyBindings(transModel, $("#transGrid")[0]);
        });
        //Gategories
        $.postErr('@Url.Action("GetCategories", "Transactions")', function (res) {
            catModel = ko.mapping.fromJS(res);
            catModel.Search = function (search) {
                search = search.toLowerCase();
                if (!search) {
                    return null;
                } else {
                    for (var i = 0, j = this.items().length; i < j; i++) {
                        var fItem = ko.utils.arrayFirst(this.items()[i].Subitems(), function (item) {
                            return item.Name().toLowerCase() == search;
                        });
                        if (fItem != null)
                            return fItem;
                    }
                }
            };
            catModel.AssignCategory = function (item) {
                if (transModel.currentItem != null) {
                    transModel.currentItem.Category(item.Name());
                    $("#cat_menu").hide();
                }
            };
            ko.applyBindings(catModel, $("#cat_menu")[0]);
            ddsmoothmenu.init({
                mainmenuid: "cat_menu", //menu DIV id
                orientation: 'v', //Horizontal or vertical menu: Set to "h" or "v"
                classname: 'ddsmoothmenu-v' //class added to menu's outer DIV
            })
            $("#cat_menu").hide();
        });
        $("#cat_menu").hover(function () {
        }, function () {
            $("#cat_menu").hide();
            $("#cat_menu ul li ul").hide();
        });
    });
</script>
<a href="#" onclick='return transModel.ReloadPage();'>Refresh</a>
<script type="text/html" id="transRowTemplate">
    <tr data-bind="click: function(event) { transModel.GoToEdit(event, $data); }, css: {selected: transModel.selectedRow() == Id()}">
        <td style="width:15%"><span data-bind="text: FormattedDate"></span></td>
        <td style="width:35%"><span data-bind="visible: transModel.selectedRow() != Id(), text: Description"></span><input class="width100" data-bind="visible: transModel.selectedRow() == Id(), value: Description" /></td>
        <td style="width:35%">
            <span data-bind="visible: transModel.selectedRow() != Id(), text: Category"></span>
            <div data-bind="visible: transModel.selectedRow() == Id()"><input class="width100" data-bind="value: Category" name="Category"/><a href="#" onclick='return transModel.ShowCategories(this);' class='category_picker'></a></div>
        </td>
        <td style="width:10%">
            <span data-bind="text: Amount"></span>
            @*<input class="width100" data-bind="visible: transModel.selectedRow() == Id(), value: Amount" />*@
        </td>
        <td style="width:5%"><a href="#" onclick='return transModel.ShowEditArea(this);' data-bind="visible: transModel.selectedRow() == Id()">Edit</a></td>
    </tr>
@*    <div data-bind="visible: transModel.selectedRow() == Id()">
        <a href="#" onclick='return transModel.ShowEditArea(this);'>Edit</a>
        <div class='edit_area hidden' data-bind="visible: transModel.selectedRow() == Id()">
            tstst
        </div>
    </div>*@
</script>

<script type="text/html" id="transPagingTemplate">
    <span>@DisplayNames.Page:</span>
    {{each(i) ko.utils.range(1, paging.PagesCount)}}
        <a href="#" data-bind="click: function() { paging.Page(i+1) }, css: { selected: i+1 == paging.Page() }">
            ${ i + 1 }
        </a>
    {{/each}}
</script>
<script type="text/html" id="transHeadTemplate">
    <tr>
    {{each(i, head) headItems()}}
        <th data-bind="attr: {colspan: Columns}, text: Text()+(paging.SortField()==head.Field() ? (paging.SortDirection() == 0 ? ' ▲' : ' ▼') : ''), click: function() { Sort(head.Field()) }"></th>
    {{/each}}
    </tr>
</script>
<div id="transGrid">
    <table class='trans_grid'>
        <thead data-bind='template: "transHeadTemplate"' >
        </thead>
        <tbody data-bind='template: { name: "transRowTemplate", foreach: items }'>
        </tbody>
    </table>
    @*    <div class='hidden' id='edit_row' style='position:fixed;border:1px solid #000;'>
        <table width="100%">
        <tr>
        <td><input name="Description" /></td>
        </tr>
        </table>
        <a href="#" onclick='return transModel.ShowEditArea(this);'>Edit</a>
        <div class='edit_area hidden'">
            tstst
        </div>
    </div>*@
    <div data-bind='template: "transPagingTemplate"' class='paging'>
    </div>
</div>

<script type="text/html" id="catTemplate">
    <li>
    <a href="#" data-bind="text: Name"></a>
        <ul>
        {{each(i, item) Subitems()}}
            <li data-bind="click: function(event) { catModel.AssignCategory(item); }">
            <a href="#" data-bind="text: Name"></a>
            </li>
        {{/each}}
        </ul>
    </li>
</script>
<div id="cat_menu" style='position:fixed'>
    <ul data-bind="template: {name:'catTemplate', foreach:items}" class='dropdown'>
    </ul>
</div>